<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<# /* Load the current project's DLL to make sure this can find things */ #>

<# /* Load the web api project DLL to make sure this can find things */ #>
<#@ assembly name="$(SolutionDir)SampleWebSite\bin\SampleWebSite.dll" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(SolutionDir)SampleWebSite\bin\System.Web.Http.dll" #>
<#@ assembly name="System.Web.Extensions" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ assembly name="System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>

<#

	var allTypes = typeof(SampleWebSite.Controllers.ThingController).Assembly.GetTypes()
		.Where(t => t.IsAbstract == false 
		&& t.IsEnum == false
		&& t.IsClass
		&& t.GetCustomAttributes(typeof(System.Web.Http.RoutePrefixAttribute), false).Length > 0);

#>

/**
* Autogenerated file at <#= System.DateTime.Now.ToString() #>
*
* Right click on Clients.tt and choose 'Run Custom Tool' to regenerate
*/
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;

 
namespace SampleClient.WebProxies {

<# foreach(var t in allTypes){ 
	var clientName = t.Name.Replace("Controller","Client");
	var attribute = (System.Web.Http.RoutePrefixAttribute)t.GetCustomAttributes(typeof(System.Web.Http.RoutePrefixAttribute), false)[0];
    var routePrefix = attribute.Prefix;

#>
	public partial class <#= clientName #> : ClientBase{

		public <#= clientName #>() : base()
		{
		}

<#

foreach(var member in t.GetMethods(BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly).Where(m => !m.IsSpecialName))
{

	var methodInfo = member;

    var description = "";

    var displayAttribute = methodInfo.GetCustomAttributes(typeof(DisplayAttribute),true)
		.OfType<DisplayAttribute>()
        .FirstOrDefault<DisplayAttribute>();

    if(displayAttribute != null){
		if(displayAttribute.Description != null){
			description = displayAttribute.Description;
        }
    }

	var typeName = GetTypeContractName(methodInfo.ReturnType);
	var clientReturnType = "Task<" + typeName + ">";
	if(typeName == "void"){
		clientReturnType = "Task";
	}

	var isEnumerable = !methodInfo.ReturnType.IsEnum 
						&& ((methodInfo.ReturnType.IsGenericType && typeof(ICollection<>)
						.IsAssignableFrom(methodInfo.ReturnType.GetGenericTypeDefinition()))
						|| typeof(Array).IsAssignableFrom(methodInfo.ReturnType));

	var isClass = isClassType(methodInfo.ReturnType);

	var parameters = methodInfo.GetParameters();
	var parameterList = new List<string>();
    foreach(var p in parameters.OrderBy(x=>x.Position))
    { 
		parameterList.Add(GetTypeContractName(p.ParameterType) + " " + p.Name);
    }
	var parameterString = string.Join(",",parameterList.ToArray());

	var isPost = (methodInfo.Name.StartsWith("Post")
					|| (methodInfo.GetCustomAttributes(typeof(System.Web.Http.HttpPostAttribute), false).Length > 0))
					&& parameterList.Count == 1;

	var isDelete = (methodInfo.Name.StartsWith("Delete")
					|| (methodInfo.GetCustomAttributes(typeof(System.Web.Http.HttpDeleteAttribute), false).Length > 0))
					&& parameterList.Count == 1;


	var routeAttribute = methodInfo.GetCustomAttributes(typeof(System.Web.Http.RouteAttribute),false)
		.OfType<System.Web.Http.RouteAttribute>()
        .FirstOrDefault<System.Web.Http.RouteAttribute>();

	var routeName = "";
	if(routeAttribute == null){
		routeName = routePrefix;	
	}else{
		routeName = routePrefix + "/" + routeAttribute.Template;	
	}

	 
	if(isPost){
	#> 
	 
		/**
		* <#=description #>
		*/
		public virtual async <#=clientReturnType#> <#=member.Name#>Async(<#=parameterString#>)
		{
			var response = await HttpClient.PostAsJsonAsync("<#=routeName#>", <#=parameters[0].Name#>);

            EnsureSuccess(response);
			<#
			if(typeName != "void")
			{
			#>
			var result = await response.ReadContentAsAsync<<#=typeName#>>();
			return result;
			<#
			}
			#>

		}
		<#
		
		}//end if IsPost
			else if(isDelete){
	#> 
	 
		/**
		* <#=description #>
		*/
		public virtual async <#=clientReturnType#> <#=member.Name#>Async(<#=parameterString#>)
		{
			//build parameters
			var dictionary = new Dictionary<string, object>();
			<# foreach(var p in parameters){ #>

				dictionary.Add("<#=p.Name#>",GetParameterValue(<#=p.Name#>));
			<#}#> 
			var queryString = BuildQueryString(dictionary);
			var response = await HttpClient.DeleteAsync("<#=routeName#>?" + queryString );
            EnsureSuccess(response);
			<#
			if(typeName != "void")
			{
			#>
			var result = await response.ReadContentAsAsync<<#=typeName#>>();
			return result;
			<#
			}
			#>

		}
		<#
		
		}//end if isDelete
		else  //get method
		{
		#>

				/**
		* <#=description #>
		*/
		public virtual async <#=clientReturnType#> <#=member.Name#>Async(<#=parameterString#>)
		{

			//build parameters
			var dictionary = new Dictionary<string, object>();
	
			<# foreach(var p in parameters){ #>
				dictionary.Add("<#=p.Name#>",GetParameterValue( <#=p.Name#>));

			<#}#> 
			var queryString = BuildQueryString(dictionary);
			var response = await HttpClient.GetAsync("<#=routeName#>?" + queryString );


            EnsureSuccess(response);
			<#
			if(typeName != "void")
			{
			#>

			var result = await response.ReadContentAsAsync<<#=typeName#>>();
			return result;
			<#
			}
			#>

		}

		<#
		}
} 
#>

	}//end class

<# } #>

	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string MyWebApiProxyBaseAddress = "http://localhost:56070/";
	}


	public static class HttpResponseMessageExtensions
	{
		public static Task<T> ReadContentAsAsync<T>(this HttpResponseMessage response)
		{
			return response.Content.ReadAsAsync<T>();
		}
	}

	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; set; }

		/// <summary>
		/// Dispose the HttpClient when this instance disposes
		/// </summary>
		public bool DisposeHttpClient{get;set;}

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientBase"/> class.
        /// </summary>
        public ClientBase()
        {
			DisposeHttpClient = true;
            HttpClient = new HttpClient()
            {
                BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
            };   
		}

		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
            var message = new HttpResponseMessage(HttpStatusCode.BadRequest)
            {
                Content = new StringContent(content)
            };
            throw new System.Web.Http.HttpResponseException(message);		
		}


	protected string BuildQueryString(Dictionary<string, object> dictionary)
        {
            var pairs = new List<string>();
            foreach(var kvp in dictionary)
            {
                if(kvp.Value != null && kvp.Value.GetType().IsArray)
                {
                    foreach(object item in (System.Collections.IEnumerable)kvp.Value)
                    {
                        pairs.Add(string.Format("{0}={1}", kvp.Key, EncodeParam(item)));
                    }
                }
                else
                {
                    pairs.Add(string.Format("{0}={1}", kvp.Key, EncodeParam(kvp.Value)));
                }
            }


            return string.Join("&", pairs.ToArray());
        }

		protected string GetParameterValue<T>(T value)
        {
            if (value == null)
            {
                return "";
            }
            else
            {
                return value.ToString();
            }
        }
        protected string GetParameterValue(DateTime? value)
        {
            if (value == null)
            {
                return "";
            }
            else
            {
                return value.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture);
            }
        }
        protected string GetParameterValue(DateTime value)
        {
               return value.ToString("s", System.Globalization.CultureInfo.InvariantCulture);
        }

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			if(value == null){
				return "";
			}else{
				return System.Net.WebUtility.UrlEncode(value.ToString());
			}
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s", System.Globalization.CultureInfo.InvariantCulture));
		}

				/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime? value) 
		{
			if(value == null){
				return "";
			}else{
				return System.Net.WebUtility.UrlEncode(value.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture));
			}
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s", System.Globalization.CultureInfo.InvariantCulture));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null && DisposeHttpClient)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

}//end namespace

<#+

    private Stack<Type> viewTypes = new Stack<Type>();
    private HashSet<Type> doneTypes = new HashSet<Type>();

	private bool isClassType(Type type){
		var isIndexed = typeof(ICollection<>).IsAssignableFrom(type)
						|| typeof(Array).IsAssignableFrom(type);

		if(isIndexed){
			type = type.GetElementType();
		}
		return type != typeof(string) &&  type.IsClass;
    }

    private string GetTypeContractName(Type type)
    {
        if (type == typeof (Task))
        {
            return "void";
        }

        if (type.IsArray)
        {
            return GetTypeContractName(type.GetElementType())+"[]";
        }

        if (type.IsGenericType && typeof(Task<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        {
            return GetTypeContractName(type.GetGenericArguments()[0]);
        }

        if (type.IsGenericType && typeof(Nullable<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        {
            return "Nullable<" + GetTypeContractName(type.GetGenericArguments()[0]) + ">";
        }

        if (type.IsGenericType && typeof(List<>).IsAssignableFrom(type.GetGenericTypeDefinition()))
        {
            return GetTypeContractName(type.GetGenericArguments()[0])+"[]";
        }

		if(type.IsValueType){
			return type.FullName;
		}

        if (!doneTypes.Contains(type))
        {
            doneTypes.Add(type);
            viewTypes.Push(type);
        }
        return GenericSpecificName(type);
    }

    private string GenericSpecificName(Type type)
    {
        string name = type.FullName;
        int index = name.IndexOf('`');
        name = index == -1 ? name : name.Substring(0, index);
        if (type.IsGenericType)
        {
			name += "<" + string.Join(", ", type.GenericTypeArguments.Select(GenericSpecificName)) + ">"; 
        }
        return name;
    }

    private string FirstCharLowered(string s)
    {
        return Regex.Replace(s, "^.", x => x.Value.ToLowerInvariant());
    }

    Dictionary<Assembly, XDocument> xmlDocs = new Dictionary<Assembly, XDocument>(); 

    private XDocument XmlDocForAssembly(Assembly a)
    {
        XDocument value;
        if (!xmlDocs.TryGetValue(a, out value))
        {
            var path = new Uri(a.CodeBase.Replace(".dll", ".xml")).LocalPath;
            xmlDocs[a] = value = File.Exists(path) ? XDocument.Load(path) : null;
        }
        return value;
    }

    private MethodDocs GetXmlDocForMethod(MethodInfo method)
    {
        var xmlDocForHub = XmlDocForAssembly(method.DeclaringType.Assembly);
        if (xmlDocForHub == null)
        {
            return new MethodDocs();
        }

        var methodName = string.Format("M:{0}.{1}({2})", method.DeclaringType.FullName, method.Name, string.Join(",", method.GetParameters().Select(x => x.ParameterType.FullName)));
        var xElement = xmlDocForHub.Descendants("member").SingleOrDefault(x => (string) x.Attribute("name") == methodName);
        return xElement==null?new MethodDocs():new MethodDocs(xElement);
    }

    private class MethodDocs
    {
        public MethodDocs()
        {
            Summary = "---";
            Parameters = new Dictionary<string, string>();
        }

        public MethodDocs(XElement xElement)
        {
            Summary = ((string) xElement.Element("summary") ?? "").Trim();
            Parameters = xElement.Elements("param").ToDictionary(x => (string) x.Attribute("name"), x=>x.Value);
        }

        public string Summary { get; set; }
        public Dictionary<string, string> Parameters { get; set; }
    
        public string ParameterSummary(string name)
        {
            if (Parameters.ContainsKey(name))
            {
                return Parameters[name];
            }
            return "";
        }
    }

#>
